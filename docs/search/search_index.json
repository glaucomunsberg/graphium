{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Graphium\n\n\nGraphium help you to walk in google street view and use IA to find elements learned.\n\n\nCommands\n\n\nCreate a dataset\n from \nPelotas\n data to be processed in a swarm with N agents.\n\n\ncd swarm/\npython Main.py --mode reader --osm_path city_pelotas/ex_pelotas.osm\n\n\n\nRun at streets\n with \n5\n agents at \nPelotas\n city.\n\n\npython Main.py --mode swarm --swarm_city 59dd4d7b6a86370cb85d6be7\n\n\n\nWeb Server\n\n\nYou can control everting on web server at:\n\n\ncd ../webserver/app/\nrails s\n\n\n\nProject layout\n\n\ndata/           # folder with all data generate by applications.\n    configs/\n    datasets/\n    logs/\n    models/\n    pictures/\napplications/   # applications suches crawler, analyzers etc\n    swarm/\n    webserver/\ndocs/           # documentation of Graphium\nmkdocs/         # generator of docs", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-graphium", 
            "text": "Graphium help you to walk in google street view and use IA to find elements learned.", 
            "title": "Welcome to Graphium"
        }, 
        {
            "location": "/#commands", 
            "text": "Create a dataset  from  Pelotas  data to be processed in a swarm with N agents.  cd swarm/\npython Main.py --mode reader --osm_path city_pelotas/ex_pelotas.osm  Run at streets  with  5  agents at  Pelotas  city.  python Main.py --mode swarm --swarm_city 59dd4d7b6a86370cb85d6be7", 
            "title": "Commands"
        }, 
        {
            "location": "/#web-server", 
            "text": "You can control everting on web server at:  cd ../webserver/app/\nrails s", 
            "title": "Web Server"
        }, 
        {
            "location": "/#project-layout", 
            "text": "data/           # folder with all data generate by applications.\n    configs/\n    datasets/\n    logs/\n    models/\n    pictures/\napplications/   # applications suches crawler, analyzers etc\n    swarm/\n    webserver/\ndocs/           # documentation of Graphium\nmkdocs/         # generator of docs", 
            "title": "Project layout"
        }, 
        {
            "location": "/swarm/", 
            "text": "Swarm\n\n\nThe swarm allow you search in google street map. Try execute the \nMain.py\n class.\n\n\nCommands\n\n\nStart using a city such \nPelotas\n.\n\n\npython Main.py --mode warm --swarm_city 59dd4d7b6a86370cb85d6be7\n\n\n\nArguments\n\n\n\n\n\n\n--swarm_identifier\n: Identifier of swarm. Empty the instance will be created else get information from db . Default \nNone\n.\n\n\n\n\n\n\n--swarm_name\n: name of swarm. If empty full with datatime\n\n\n\n\n\n\n--user_email\n: Email to identify the user. Default \nadmin@graphium.com\n.\n\n\n\n\n\n\n--swarm_num_agent\n: Number of agents to work\n\n\n\n\n\n\n--swarm_city\n: City to crawler.", 
            "title": "About Swarm"
        }, 
        {
            "location": "/swarm/#swarm", 
            "text": "The swarm allow you search in google street map. Try execute the  Main.py  class.", 
            "title": "Swarm"
        }, 
        {
            "location": "/swarm/#commands", 
            "text": "Start using a city such  Pelotas .  python Main.py --mode warm --swarm_city 59dd4d7b6a86370cb85d6be7", 
            "title": "Commands"
        }, 
        {
            "location": "/swarm/#arguments", 
            "text": "--swarm_identifier : Identifier of swarm. Empty the instance will be created else get information from db . Default  None .    --swarm_name : name of swarm. If empty full with datatime    --user_email : Email to identify the user. Default  admin@graphium.com .    --swarm_num_agent : Number of agents to work    --swarm_city : City to crawler.", 
            "title": "Arguments"
        }, 
        {
            "location": "/swarm/anima/looker/", 
            "text": "Definition\n\n\nLooker.py\n look to google street view with point received from \nGeospatial.py\n and get the images of sides (left and right) with a instance of \nAPI.py\n.\n\n\nParams\n\n\nlogger\n: a instance of logger or \nNone\n. \ntype:Logger\n\n\nMethods\n\n\ndriveFromPointToPoint\n: received two points find the intermediate points, logo to left and right of each point and send the image to Oracle analyze.\n\n\ncheckPointToPredict\n: Check if in point the Oracle identify something if true sabe the informations", 
            "title": "Looker"
        }, 
        {
            "location": "/swarm/anima/looker/#definition", 
            "text": "Looker.py  look to google street view with point received from  Geospatial.py  and get the images of sides (left and right) with a instance of  API.py .", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/anima/looker/#params", 
            "text": "logger : a instance of logger or  None .  type:Logger", 
            "title": "Params"
        }, 
        {
            "location": "/swarm/anima/looker/#methods", 
            "text": "driveFromPointToPoint : received two points find the intermediate points, logo to left and right of each point and send the image to Oracle analyze.  checkPointToPredict : Check if in point the Oracle identify something if true sabe the informations", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/anima/oracle/", 
            "text": "Definition\n\n\nOracle.py\n Load a keras model and take predictions in images of google street view.\n\n\nParams\n\n\nmodel_name\n: name of model used to predictions\n\n\nMethods\n\n\npredictInPano\n: Prediction in image. \ntype:Boolean", 
            "title": "Oracle"
        }, 
        {
            "location": "/swarm/anima/oracle/#definition", 
            "text": "Oracle.py  Load a keras model and take predictions in images of google street view.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/anima/oracle/#params", 
            "text": "model_name : name of model used to predictions", 
            "title": "Params"
        }, 
        {
            "location": "/swarm/anima/oracle/#methods", 
            "text": "predictInPano : Prediction in image.  type:Boolean", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/hive/agent/", 
            "text": "Definition\n\n\nAgent.py\n is a class  in Thread that walk in a street.\n\n\nParams\n\n\nswarm_identifier\n: a identifier. \ntype:Stirng\n\n\nMethods\n\n\nrun\n : start the executation.\n\n\nupdateRule\n : Update the Street's counter.\n\n\nnodeByNode\n: calcule the distance between two dots in meters. \ntype:Int\n\n\nfirstNode\n: execute only on first node.\n\n\nlastNode\n: execute only on last node.\n\n\nlastNode\n: call when we have only one node at street.\n\n\nchooseTheFirstStreet\n: Method to choose the first street to try walk. First choose a way from wishlist else a aleatory way. \ntype:Street\n\n\nchooseTheFirstStret\n: After walk one street new need choose de next this method choose the way with less count and return. If any way cross he then we need get other way how? Go to other agent =]. \ntype:Street\n\n\nfastChooseTheNextStret\n: this method choose the fast way: check the list of wish, if empty choose the fist road that is not busy and count igual 0. \ntype:Street\n\n\nchoosingNewStreetToNavegate\n: choose the street with the less weight to navegate. \ntype:Street\n\n\nappendPathBread\n: update the lat and lng of agent set at pathbread of agent.\n\n\nappendStreetVisited\n: insert the name of the street if agent are not visited yet.\n\n\nstartAgent\n: Set the name, start the mongo information and others actions.\n\n\nfinish\n: Set information about agent at db and close at db.\n\n\ngetIdentifier\n: Return the identifier. \ntype:Identifier\n\n\nsetIdentifier\n: set the identifier.\n\n\nsetAgentName\n: Return the agent name.", 
            "title": "Agent"
        }, 
        {
            "location": "/swarm/hive/agent/#definition", 
            "text": "Agent.py  is a class  in Thread that walk in a street.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/hive/agent/#params", 
            "text": "swarm_identifier : a identifier.  type:Stirng", 
            "title": "Params"
        }, 
        {
            "location": "/swarm/hive/agent/#methods", 
            "text": "run  : start the executation.  updateRule  : Update the Street's counter.  nodeByNode : calcule the distance between two dots in meters.  type:Int  firstNode : execute only on first node.  lastNode : execute only on last node.  lastNode : call when we have only one node at street.  chooseTheFirstStreet : Method to choose the first street to try walk. First choose a way from wishlist else a aleatory way.  type:Street  chooseTheFirstStret : After walk one street new need choose de next this method choose the way with less count and return. If any way cross he then we need get other way how? Go to other agent =].  type:Street  fastChooseTheNextStret : this method choose the fast way: check the list of wish, if empty choose the fist road that is not busy and count igual 0.  type:Street  choosingNewStreetToNavegate : choose the street with the less weight to navegate.  type:Street  appendPathBread : update the lat and lng of agent set at pathbread of agent.  appendStreetVisited : insert the name of the street if agent are not visited yet.  startAgent : Set the name, start the mongo information and others actions.  finish : Set information about agent at db and close at db.  getIdentifier : Return the identifier.  type:Identifier  setIdentifier : set the identifier.  setAgentName : Return the agent name.", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/hive/swarm/", 
            "text": "Definition\n\n\nSwarm.py\n manage the \nAgent.py\n.\n\n\nParams\n\n\nargs\n: argparse. \ntype:argparse\n\n\nMethods\n\n\nsyncFromDB\n : Sync the information with database\n\n\nstart\n : Start the execution of each agents crawling the street until end list of street not visited\n\n\nfinish\n : After the agents finish, the swarm, calcule QMI", 
            "title": "Swarm"
        }, 
        {
            "location": "/swarm/hive/swarm/#definition", 
            "text": "Swarm.py  manage the  Agent.py .", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/hive/swarm/#params", 
            "text": "args : argparse.  type:argparse", 
            "title": "Params"
        }, 
        {
            "location": "/swarm/hive/swarm/#methods", 
            "text": "syncFromDB  : Sync the information with database  start  : Start the execution of each agents crawling the street until end list of street not visited  finish  : After the agents finish, the swarm, calcule QMI", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/system/graphium/", 
            "text": "Definition\n\n\nThe graphium return a instance of Graphium. It is a Dic with many configs what you can see inside the directory \ndata/configs/\n\n\nAttributes\n\n\nconfig\n : the metadata of configuration has default. The file \ndata/configs/graphium.json\n is load to system.\ntype:Dic\n\n\nKeys inside attribute config:\n\n\n{\n    \"path_root\": \"\nPATH\n/kootstrap/\",\n    \"path_log\":\"data/logs/\",\n    \"path_config\":\"data/configs/\",\n    \"path_dataset\":\"data/datasets/\",\n\n    \"log_level\":\"INFO\",\n    \"version\":\"0.0.1\"\n}\n\n\n\nmongo\n : the metadata of mongoDB used has default. The file \ndata/configs/mongodb.json\n is load to system. \ntype:Dic\n\n\nKeys inside attribute Mongod:\n\n\n{\n    \"mongo_db\":\"graphium\",\n    \"mongo_host\":\"localhost\",\n    \"mongo_port\":27017\n}\n\n\n\nosm\n : the metadata of Open Street Map used has default. The file \ndata/configs/osm.json\n is load to system. \ntype:Dic\n\n\nKeys inside attribute OSM:\n\n\n{\n  \"use_urban_ways\": true,\n  \"use_motorways\": true,\n  \"use_othersways\":false,\n  \"urban_highway_tipes\": [\"tertiary\", \"road\", \"residential\", \"service\", \"living_street\", \"pedestrian\", \"bus_guideway\", \"steps\",\"secondary\", \"trunk\", \"primary\"],\n  \"motorways_highway_tipes\": [\"motorway\", \"escape\"],\n  \"others_highway_tipes\": [\"track\"]\n}\n\n\n\nswarm\n : the metadata of Swarm used has default. The file \ndata/configs/swarm.json\n is load to system. \ntype:Dic\n\n\nKeys inside attribute Swarm:\n\n\n{\n  \"swarm_turns\": 3,\n  \"swarm_cycles\": -1,\n  \"swarm_agent_names_API\": \"http://namey.muffinlabs.com/name.json?with_surname=true\nfrequency=all\",\n  \"swarm_agent_names\": [\"Coralina Malaya\",\"Abigail Johnson\",\"Antonietta Marinese\",\"Elisa Rogoff\",\"Serafim Folkerts\", \"Dulce Barrell\"],\n  \"swarm_agent_colors\": [\"#E91E63\", \"#9C27B0\", \"#F44336\", \"#673AB7\", \"#3F51B5\", \"#2196F3\", \"#00BCD4\", \"#009688\", \"#4CAF50\", \"#CDDC39\", \"#FF9800\",\"#795548\",\"#FF5722\",\"#607D8B\",\"#9E9E9E\",\"#827717\"]\n}\n\n\n\ngmaps\n : the metadata of google street maps used has default. The file \ndata/configs/gmaps.json\n is load to system. \ntype:Dic\n\n\nKeys inside attribute Gmap:\n\n\n{\n    \"width\": 640,\n    \"height\": 450,\n    \"google_key\": \"AIzaSyB6_XPVntnTJHG9jN9OrO11ou8GEV77qOM\"\n  }\n\n\nscissor\n : the metadata of scissor used has default. The file \ndata/configs/scissor.json\n is load to system. \ntype:Dic\n\n\nKeys inside attribute Scissor:\n\n\n{\n    \"target_max_width\":224,\n    \"target_max_height\":224,\n    \"target_min_width\":224,\n    \"target_min_height\":224,\n    \"target_rate\":0.8\n}\n\n\n\nMethods\n\n\npath_config\n: Return absolute path to configurations of koopstrap. \ntype:String\n\n\npath_log\n: Return absolute path to logs of system. \ntype:String\n\n\npath_dataset\n: Return absolute path to all datasets. \ntype:String\n\n\npath_model\n: Return absolute path to all models. \ntype:String\n\n\npath_picture\n: Return absolute path to all images on directory. \ntype:String\n\n\nversion\n: Return version of koopstrap. \ntype:String", 
            "title": "Graphium"
        }, 
        {
            "location": "/swarm/system/graphium/#definition", 
            "text": "The graphium return a instance of Graphium. It is a Dic with many configs what you can see inside the directory  data/configs/", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/system/graphium/#attributes", 
            "text": "config  : the metadata of configuration has default. The file  data/configs/graphium.json  is load to system. type:Dic  Keys inside attribute config:  {\n    \"path_root\": \" PATH /kootstrap/\",\n    \"path_log\":\"data/logs/\",\n    \"path_config\":\"data/configs/\",\n    \"path_dataset\":\"data/datasets/\",\n\n    \"log_level\":\"INFO\",\n    \"version\":\"0.0.1\"\n}  mongo  : the metadata of mongoDB used has default. The file  data/configs/mongodb.json  is load to system.  type:Dic  Keys inside attribute Mongod:  {\n    \"mongo_db\":\"graphium\",\n    \"mongo_host\":\"localhost\",\n    \"mongo_port\":27017\n}  osm  : the metadata of Open Street Map used has default. The file  data/configs/osm.json  is load to system.  type:Dic  Keys inside attribute OSM:  {\n  \"use_urban_ways\": true,\n  \"use_motorways\": true,\n  \"use_othersways\":false,\n  \"urban_highway_tipes\": [\"tertiary\", \"road\", \"residential\", \"service\", \"living_street\", \"pedestrian\", \"bus_guideway\", \"steps\",\"secondary\", \"trunk\", \"primary\"],\n  \"motorways_highway_tipes\": [\"motorway\", \"escape\"],\n  \"others_highway_tipes\": [\"track\"]\n}  swarm  : the metadata of Swarm used has default. The file  data/configs/swarm.json  is load to system.  type:Dic  Keys inside attribute Swarm:  {\n  \"swarm_turns\": 3,\n  \"swarm_cycles\": -1,\n  \"swarm_agent_names_API\": \"http://namey.muffinlabs.com/name.json?with_surname=true frequency=all\",\n  \"swarm_agent_names\": [\"Coralina Malaya\",\"Abigail Johnson\",\"Antonietta Marinese\",\"Elisa Rogoff\",\"Serafim Folkerts\", \"Dulce Barrell\"],\n  \"swarm_agent_colors\": [\"#E91E63\", \"#9C27B0\", \"#F44336\", \"#673AB7\", \"#3F51B5\", \"#2196F3\", \"#00BCD4\", \"#009688\", \"#4CAF50\", \"#CDDC39\", \"#FF9800\",\"#795548\",\"#FF5722\",\"#607D8B\",\"#9E9E9E\",\"#827717\"]\n}  gmaps  : the metadata of google street maps used has default. The file  data/configs/gmaps.json  is load to system.  type:Dic  Keys inside attribute Gmap:  {\n    \"width\": 640,\n    \"height\": 450,\n    \"google_key\": \"AIzaSyB6_XPVntnTJHG9jN9OrO11ou8GEV77qOM\"\n  }  scissor  : the metadata of scissor used has default. The file  data/configs/scissor.json  is load to system.  type:Dic  Keys inside attribute Scissor:  {\n    \"target_max_width\":224,\n    \"target_max_height\":224,\n    \"target_min_width\":224,\n    \"target_min_height\":224,\n    \"target_rate\":0.8\n}", 
            "title": "Attributes"
        }, 
        {
            "location": "/swarm/system/graphium/#methods", 
            "text": "path_config : Return absolute path to configurations of koopstrap.  type:String  path_log : Return absolute path to logs of system.  type:String  path_dataset : Return absolute path to all datasets.  type:String  path_model : Return absolute path to all models.  type:String  path_picture : Return absolute path to all images on directory.  type:String  version : Return version of koopstrap.  type:String", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/system/helper/", 
            "text": "Definition\n\n\nThe Helper return a instance of Helper. It content a list of methods that help the manipulation of date for exemple.\n\n\nMethods\n\n\ngetTimeNow\n: Return a string with date in this format \n%Y-%m-%d %H:%M:%S\n. \ntype:String\n\n\ngetSerialNow\n: Return a string with a serial in this format \n%Y%m%d%H%M%S\n. \ntype:String\n\n\nfilePathToList\n: Receive a path of file, open and return a list of lines without \n\\n\n and \n\\r", 
            "title": "Helper"
        }, 
        {
            "location": "/swarm/system/helper/#definition", 
            "text": "The Helper return a instance of Helper. It content a list of methods that help the manipulation of date for exemple.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/system/helper/#methods", 
            "text": "getTimeNow : Return a string with date in this format  %Y-%m-%d %H:%M:%S .  type:String  getSerialNow : Return a string with a serial in this format  %Y%m%d%H%M%S .  type:String  filePathToList : Receive a path of file, open and return a list of lines without  \\n  and  \\r", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/system/logger/", 
            "text": "Definition\n\n\nThe Logger return a instance of Logger. It content a list of methods that help write in a log file.\n\n\nMethods\n\n\nerror\n: Insert a message at level error. \ntype:String\n\n\ncritical\n: Insert a message at critical level. \ntype:String\n\n\nwarning\n: Insert a message at warning level. \ntype:String\n\n\ninfo\n: Insert a message at info level. \ntype:String\n\n\ndebug\n: Insert a message at debug level. \ntype:String", 
            "title": "Logger"
        }, 
        {
            "location": "/swarm/system/logger/#definition", 
            "text": "The Logger return a instance of Logger. It content a list of methods that help write in a log file.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/system/logger/#methods", 
            "text": "error : Insert a message at level error.  type:String  critical : Insert a message at critical level.  type:String  warning : Insert a message at warning level.  type:String  info : Insert a message at info level.  type:String  debug : Insert a message at debug level.  type:String", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/system/mongo/", 
            "text": "Definition\n\n\nThe Mongo return a unique instance of Mongo. It content a list of methods that help write in mongo DB.\n\n\nMethods\n\n\nAgents\n\n\ngetAgentByIdentifier\n: Return the agent by Identifer. \ntype:Object\n\n\ngetAgentByName\n: Like  \ngetAgentByIdentifier\n but by name. \ntype:Object\n\n\nupdateAgentByName\n: Update agente by name. \ntype:Boolean\n\n\nupdateAgentByIdentifier\n: update agent by \nidentifier\n. \ntype:Boolean\n\n\ninsertAgent\n: Create a new agent in a swarm by your \nidentifier\n. \ntype:String:Identifier\n\n\nendAgent\n: Finish their execution. \ntype:Boolean\n\n\ngetAgentsBySwarmIdentifier\n: Get agents in swar my \nidentifier\n. \ntype:List:Object\n\n\ngetAgentQuery\n: Generic. \ntype:List\n\n\ngetAgentsActiveBySwarm\n: Only active agents in swarm by \nidentifier\n. \ntype:List\n\n\ngetAgentsEndWellBySwarm\n: Return a list with agents that end well. \ntype:List\n\n\nUsers\n\n\ninsertUser\n: Create a new user. \ntype:String:Identifier\n\n\nupdateUserInformation\n: Updat the email and date of user. \ntype:Boolean\n\n\ngetUsersQuery\n: Generic. \ntype:List\n\n\nremoveUsers\n: Remove user from mongo db. \ntype:Boolean\n\n\nStreets\n\n\ngetStreetByIdOSM\n: Return the first street by \nidentifier\n. \ntype:Object\n\n\ngetStreetByName\n: Return the first street by \nstreet name\n. \ntype:Object\n\n\nupdateStreetById\n: Update the street with id \nidentifier\n. \ntype:Boolean\n\n\ngetStreetQuery\n: Generic. \ntype:List\n\n\nWishLists\n\n\ninsertWishList\n: Insert a wish List that is a street that pretend visit. \ntype:Boolean\n\n\nremoveWishList\n: Remove a wish List by \nquery\n. \ntype:Boolean\n\n\ngetWishListById\n: get wishList by \nid\n. \ntype:Object\n\n\nSwarms\n\n\ninsertSwarm\n: Insert a new swart at database . \ntype:String:Identifier\n\n\ngetSwarmByIdentifier\n: Return the first object with \nidentifier\n . \ntype:Object\n\n\nupdateSwarmByIdentifier\n: update the swarm by \nidentifier\n. \ntype:Boolean\n\n\nLog\n\n\naddLog\n: add log in a swarm \nid\n. \ntype:Boolean\n\n\nWish\n\n\nupdateWishById\n: update the wish by \nid\n. \ntype:Object\n\n\ngetWishListByIdentifier\n: update the wish List by \nIdentifier\n. \ntype:List\n\n\ngetWishListNoProccessedByIdentifier\n: return only the streets in wishList not processed. \ntype:List\n\n\nupdateWishListById\n: Upodat the wish list with \ndata\n. \ntype:Boolean\n\n\nGraffiti\n\n\ninsertGraffiti\n: Insert a graffiti in mongodb. \ntype:String:Identifier", 
            "title": "Logger"
        }, 
        {
            "location": "/swarm/system/mongo/#definition", 
            "text": "The Mongo return a unique instance of Mongo. It content a list of methods that help write in mongo DB.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/system/mongo/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/system/mongo/#agents", 
            "text": "getAgentByIdentifier : Return the agent by Identifer.  type:Object  getAgentByName : Like   getAgentByIdentifier  but by name.  type:Object  updateAgentByName : Update agente by name.  type:Boolean  updateAgentByIdentifier : update agent by  identifier .  type:Boolean  insertAgent : Create a new agent in a swarm by your  identifier .  type:String:Identifier  endAgent : Finish their execution.  type:Boolean  getAgentsBySwarmIdentifier : Get agents in swar my  identifier .  type:List:Object  getAgentQuery : Generic.  type:List  getAgentsActiveBySwarm : Only active agents in swarm by  identifier .  type:List  getAgentsEndWellBySwarm : Return a list with agents that end well.  type:List", 
            "title": "Agents"
        }, 
        {
            "location": "/swarm/system/mongo/#users", 
            "text": "insertUser : Create a new user.  type:String:Identifier  updateUserInformation : Updat the email and date of user.  type:Boolean  getUsersQuery : Generic.  type:List  removeUsers : Remove user from mongo db.  type:Boolean", 
            "title": "Users"
        }, 
        {
            "location": "/swarm/system/mongo/#streets", 
            "text": "getStreetByIdOSM : Return the first street by  identifier .  type:Object  getStreetByName : Return the first street by  street name .  type:Object  updateStreetById : Update the street with id  identifier .  type:Boolean  getStreetQuery : Generic.  type:List", 
            "title": "Streets"
        }, 
        {
            "location": "/swarm/system/mongo/#wishlists", 
            "text": "insertWishList : Insert a wish List that is a street that pretend visit.  type:Boolean  removeWishList : Remove a wish List by  query .  type:Boolean  getWishListById : get wishList by  id .  type:Object", 
            "title": "WishLists"
        }, 
        {
            "location": "/swarm/system/mongo/#swarms", 
            "text": "insertSwarm : Insert a new swart at database .  type:String:Identifier  getSwarmByIdentifier : Return the first object with  identifier  .  type:Object  updateSwarmByIdentifier : update the swarm by  identifier .  type:Boolean", 
            "title": "Swarms"
        }, 
        {
            "location": "/swarm/system/mongo/#log", 
            "text": "addLog : add log in a swarm  id .  type:Boolean", 
            "title": "Log"
        }, 
        {
            "location": "/swarm/system/mongo/#wish", 
            "text": "updateWishById : update the wish by  id .  type:Object  getWishListByIdentifier : update the wish List by  Identifier .  type:List  getWishListNoProccessedByIdentifier : return only the streets in wishList not processed.  type:List  updateWishListById : Upodat the wish list with  data .  type:Boolean", 
            "title": "Wish"
        }, 
        {
            "location": "/swarm/system/mongo/#graffiti", 
            "text": "insertGraffiti : Insert a graffiti in mongodb.  type:String:Identifier", 
            "title": "Graffiti"
        }, 
        {
            "location": "/swarm/assistant/geospatial/", 
            "text": "Definition\n\n\nGeospatial.py\n mensure to you the distance between two points or for example slice two points at many points with the same distance between them.\n\n\nParams\n\n\nlogger\n: a instance of logger or \nNone\n. \ntype:Logger\n\n\nMethods\n\n\ngetDistance\n : Return the distance bewteen two dots. \ntype:float\n\n\ngetIntermediatePointsFromTwoDots\n: Return intermediate points between two dots if the distance bewteen them is great that distanceMax. \ntype:List\n\n\ncalculateStreetOrientation\n: Return the \nbearing\n or the direction (degrees) of the points \ntype:Float\n\n\ngetIntermediatePointsFromTwoCoordinates\n: the same of \ngetIntermediatePointsFromTwoDots\n but not receive a tuple, but the 4 values (lat1,lng1,lat2,lng2)", 
            "title": "GeoSpatial"
        }, 
        {
            "location": "/swarm/assistant/geospatial/#definition", 
            "text": "Geospatial.py  mensure to you the distance between two points or for example slice two points at many points with the same distance between them.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/assistant/geospatial/#params", 
            "text": "logger : a instance of logger or  None .  type:Logger", 
            "title": "Params"
        }, 
        {
            "location": "/swarm/assistant/geospatial/#methods", 
            "text": "getDistance  : Return the distance bewteen two dots.  type:float  getIntermediatePointsFromTwoDots : Return intermediate points between two dots if the distance bewteen them is great that distanceMax.  type:List  calculateStreetOrientation : Return the  bearing  or the direction (degrees) of the points  type:Float  getIntermediatePointsFromTwoCoordinates : the same of  getIntermediatePointsFromTwoDots  but not receive a tuple, but the 4 values (lat1,lng1,lat2,lng2)", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/assistant/reader/", 
            "text": "Definition\n\n\nReader.py\n allow you convert files \n.osm\n into a struct used by Graphium system.\n\n\nParams\n\n\nargs\n: Receive the params suchs the file to convert. \ntype:argparse\n\n\nMethods\n\n\nstart\n : transform the file .osm in a mongodb struct.\n\n\ninsertStreetInformationOSM\n: insert the data from street at mongodb\n\n\ninsertCityInformationOSM\n: insert the information about the city at mongodb\n\n\ngetCityAndCoutry\n: Return the city on mongodb. \ntype:Dic\n\n\nreadShapeFromOpenStreet\n: Get the shape with the information on ESRI shapefile.", 
            "title": "Reader"
        }, 
        {
            "location": "/swarm/assistant/reader/#definition", 
            "text": "Reader.py  allow you convert files  .osm  into a struct used by Graphium system.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/assistant/reader/#params", 
            "text": "args : Receive the params suchs the file to convert.  type:argparse", 
            "title": "Params"
        }, 
        {
            "location": "/swarm/assistant/reader/#methods", 
            "text": "start  : transform the file .osm in a mongodb struct.  insertStreetInformationOSM : insert the data from street at mongodb  insertCityInformationOSM : insert the information about the city at mongodb  getCityAndCoutry : Return the city on mongodb.  type:Dic  readShapeFromOpenStreet : Get the shape with the information on ESRI shapefile.", 
            "title": "Methods"
        }, 
        {
            "location": "/swarm/assistant/api/", 
            "text": "Definition\n\n\nAPI.py\n connect to OsmAPI.\n\n\nParams\n\n\nusermme\n: name in API. \ntype:Stirng\n\n\npassword\n: password in API. \ntype:Stirng\n\n\nMethods\n\n\ngetWaysByNode\n : Get the routes that the dot is a bit.\n\n\ngetPanoByPoint\n: Return the image pano form this point. \ntype:Dic\n\n\ngetPanoInfoByPoint\n: Return the information of this point (lat,lng). \ntype:Dic\n\n\ngetStreetGeocodeInfoFromMaps\n: Get street Geo Code information suchs country,city, address from \nGoogle Maps\n.\n\n\ngetStreetGeoCodeInfoFromOSM\n: Get street Geo Code information suchs country,city, address from \nOpen Street Maps", 
            "title": "API"
        }, 
        {
            "location": "/swarm/assistant/api/#definition", 
            "text": "API.py  connect to OsmAPI.", 
            "title": "Definition"
        }, 
        {
            "location": "/swarm/assistant/api/#params", 
            "text": "usermme : name in API.  type:Stirng  password : password in API.  type:Stirng", 
            "title": "Params"
        }, 
        {
            "location": "/swarm/assistant/api/#methods", 
            "text": "getWaysByNode  : Get the routes that the dot is a bit.  getPanoByPoint : Return the image pano form this point.  type:Dic  getPanoInfoByPoint : Return the information of this point (lat,lng).  type:Dic  getStreetGeocodeInfoFromMaps : Get street Geo Code information suchs country,city, address from  Google Maps .  getStreetGeoCodeInfoFromOSM : Get street Geo Code information suchs country,city, address from  Open Street Maps", 
            "title": "Methods"
        }, 
        {
            "location": "/webserver/", 
            "text": "", 
            "title": "About Maker"
        }, 
        {
            "location": "/about/license/", 
            "text": "MIT License\n\n\nCopyright (c) 2017 Glauco Roberto Munsberg\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Release Notes\n\n\nVersion 0.0.3\n\n\n\n\nAnima\n: The \nLooker.py\n moved into Package and create\n\n\nAnima\n: \nOracle.py\n class responsible by predictions models\n\n\nAssistant\n: Intro \nScissor.py\n to cut images. \nAPI.py\n moved into this Package\n\n\nAssistant\n: \nReader.py\n improved to make a place \u2013 without city information \u2013 a fictional city\n\n\nHive\n: Agents now drive between two dots\n\n\nSystem\n: improved the \nGraphium.py\n to scissor information\n\n\n\n\nVersion 0.0.2\n\n\n\n\nAssistant\n: Intro \nGeoSpatial.py\n to cal distance and intermediate points of system\n\n\nAssistant\n: Intro \nLooker.py\n search the pictures on google street view\n\n\nHive\n: Improved the \nAgent.py\n and \nAPI.py\n\n\nSystem\n: Now the \nGraphium.py\n has the config to download images from Google Street View\n\n\nSystem\n: Graphium receive the picture folder to not request two time the same pano image. Google restricts 25.000 requests by day\n\n\n\n\nVersion 0.0.1\n\n\n\n\nProject start baseded on old graphium project", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release-notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/about/release-notes/#version-003", 
            "text": "Anima : The  Looker.py  moved into Package and create  Anima :  Oracle.py  class responsible by predictions models  Assistant : Intro  Scissor.py  to cut images.  API.py  moved into this Package  Assistant :  Reader.py  improved to make a place \u2013 without city information \u2013 a fictional city  Hive : Agents now drive between two dots  System : improved the  Graphium.py  to scissor information", 
            "title": "Version 0.0.3"
        }, 
        {
            "location": "/about/release-notes/#version-002", 
            "text": "Assistant : Intro  GeoSpatial.py  to cal distance and intermediate points of system  Assistant : Intro  Looker.py  search the pictures on google street view  Hive : Improved the  Agent.py  and  API.py  System : Now the  Graphium.py  has the config to download images from Google Street View  System : Graphium receive the picture folder to not request two time the same pano image. Google restricts 25.000 requests by day", 
            "title": "Version 0.0.2"
        }, 
        {
            "location": "/about/release-notes/#version-001", 
            "text": "Project start baseded on old graphium project", 
            "title": "Version 0.0.1"
        }
    ]
}