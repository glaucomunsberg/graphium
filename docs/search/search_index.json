{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Graphium Graphium help you to walk in google street view and use IA to find elements learned. Project layout data/ # folder with all data generate by applications. configs/ datasets/ logs/ models/ pictures/ applications/ # applications suches crawler, analyzers etc swarm/ webserver/ docs/ # documentation of Graphium mkdocs/ # generator of docs","title":"Welcome"},{"location":"#welcome-to-graphium","text":"Graphium help you to walk in google street view and use IA to find elements learned.","title":"Welcome to Graphium"},{"location":"#project-layout","text":"data/ # folder with all data generate by applications. configs/ datasets/ logs/ models/ pictures/ applications/ # applications suches crawler, analyzers etc swarm/ webserver/ docs/ # documentation of Graphium mkdocs/ # generator of docs","title":"Project layout"},{"location":"about/execution/","text":"Commands Before you need load a dataset from a city. You need populate the database to be processed with a swarm with N agents. Bellow you can see how upload the city Pelotas database: cd swarm/ python Main.py --mode reader --osm_path city_pelotas_full/ex_pelotas.osm After upload the database \u2013 with reader mode \u2013 you can execute the a swarm with N agents to find images with a model. Example: To run at streets with 5 agents at Pelotas city. python Main.py --mode swarm --swarm_city 59dd4d7b6a86370cb85d6be7 Web Server You can see throw the dashboard on web server at: cd ../webserver/app/ rails s Then, open you browser and go to http://localhost:3000 .","title":"Run Application"},{"location":"about/execution/#commands","text":"Before you need load a dataset from a city. You need populate the database to be processed with a swarm with N agents. Bellow you can see how upload the city Pelotas database: cd swarm/ python Main.py --mode reader --osm_path city_pelotas_full/ex_pelotas.osm After upload the database \u2013 with reader mode \u2013 you can execute the a swarm with N agents to find images with a model. Example: To run at streets with 5 agents at Pelotas city. python Main.py --mode swarm --swarm_city 59dd4d7b6a86370cb85d6be7","title":"Commands"},{"location":"about/execution/#web-server","text":"You can see throw the dashboard on web server at: cd ../webserver/app/ rails s Then, open you browser and go to http://localhost:3000 .","title":"Web Server"},{"location":"about/installation/","text":"Environment MAC OS X 10.14 Basic Instalation $ xcode-select --install Brew $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" $ brew install readline xz $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target / PyEnv $ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash $ nano ~/.bashrc Insert the content in bashrc file export PATH=\u201d~/.pyenv/bin:$PATH\u201d eval \u201c$(pyenv init -)\u201d eval \u201c$(pyenv virtualenv-init -)\u201d $ source ~/.bashrc $ pyenv install 2.7 $ pyenv local 2.7 MongoDB $ brew install mongodb $ sudo mkdir -p /data/db To start a service $ sudo mongod Libraries $ pip install pymongo unidecode pillow h5py tensorflow keras mkdocs mkdocs-material $ pip install osgeo osmread osmapi geopy Installing osgeo library $ brew install gdal Installing Wand library $ brew install imagemagick@6 $ pip install wand $ ln -s /usr/local/Cellar/imagemagick@6/ /lib/libMagickWand-6.Q16.dylib /usr/local/lib/libMagickWand.dylib Install Ruby on Rails Read and install https://gorails.com/setup/osx/10.14-mojave","title":"Installation"},{"location":"about/installation/#environment-mac-os-x-1014","text":"","title":"Environment MAC OS X 10.14"},{"location":"about/installation/#basic-instalation","text":"$ xcode-select --install","title":"Basic Instalation"},{"location":"about/installation/#brew","text":"$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" $ brew install readline xz $ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /","title":"Brew"},{"location":"about/installation/#pyenv","text":"$ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash $ nano ~/.bashrc Insert the content in bashrc file export PATH=\u201d~/.pyenv/bin:$PATH\u201d eval \u201c$(pyenv init -)\u201d eval \u201c$(pyenv virtualenv-init -)\u201d $ source ~/.bashrc $ pyenv install 2.7 $ pyenv local 2.7","title":"PyEnv"},{"location":"about/installation/#mongodb","text":"$ brew install mongodb $ sudo mkdir -p /data/db To start a service $ sudo mongod","title":"MongoDB"},{"location":"about/installation/#libraries","text":"$ pip install pymongo unidecode pillow h5py tensorflow keras mkdocs mkdocs-material $ pip install osgeo osmread osmapi geopy","title":"Libraries"},{"location":"about/installation/#installing-osgeo-library","text":"$ brew install gdal","title":"Installing osgeo library"},{"location":"about/installation/#installing-wand-library","text":"$ brew install imagemagick@6 $ pip install wand $ ln -s /usr/local/Cellar/imagemagick@6/ /lib/libMagickWand-6.Q16.dylib /usr/local/lib/libMagickWand.dylib","title":"Installing Wand library"},{"location":"about/installation/#install-ruby-on-rails","text":"Read and install https://gorails.com/setup/osx/10.14-mojave","title":"Install Ruby on Rails"},{"location":"about/license/","text":"MIT License Copyright (c) 2017 Glauco Roberto Munsberg Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Release Notes Version 0.0.5 Anima : Oracle.py now whit model params form json file System : With Session.py to control accesses on google API Assistent : Controller GoogleAPI.py to many Google Console Keys Docs : With Google Material Version 0.0.4 Anima : fixing insertGraffiti call Anima : Looker.py receive the swarm_identifier now Assistant : Into API.py the limit of google maps API request Hive : Swarm.py improved to set the date start and number of request from agents in google maps api System : improved the Mongo.py to google maps interactions Version 0.0.3 Anima : The Looker.py moved into Package and create Anima : Oracle.py class responsible by predictions models Assistant : Intro Scissor.py to cut images. API.py moved into this Package Assistant : Reader.py improved to make a place \u2013 without city information \u2013 a fictional city Hive : Agents now drive between two dots System : improved the Graphium.py to scissor information Version 0.0.2 Assistant : Intro GeoSpatial.py to cal distance and intermediate points of system Assistant : Intro Looker.py search the pictures on google street view Hive : Improved the Agent.py and API.py System : Now the Graphium.py has the config to download images from Google Street View System : Graphium receive the picture folder to not request two time the same pano_image. Google restricts 25.000 requests by day Version 0.0.1 Project start based on old graphium project","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#version-005","text":"Anima : Oracle.py now whit model params form json file System : With Session.py to control accesses on google API Assistent : Controller GoogleAPI.py to many Google Console Keys Docs : With Google Material","title":"Version 0.0.5"},{"location":"about/release-notes/#version-004","text":"Anima : fixing insertGraffiti call Anima : Looker.py receive the swarm_identifier now Assistant : Into API.py the limit of google maps API request Hive : Swarm.py improved to set the date start and number of request from agents in google maps api System : improved the Mongo.py to google maps interactions","title":"Version 0.0.4"},{"location":"about/release-notes/#version-003","text":"Anima : The Looker.py moved into Package and create Anima : Oracle.py class responsible by predictions models Assistant : Intro Scissor.py to cut images. API.py moved into this Package Assistant : Reader.py improved to make a place \u2013 without city information \u2013 a fictional city Hive : Agents now drive between two dots System : improved the Graphium.py to scissor information","title":"Version 0.0.3"},{"location":"about/release-notes/#version-002","text":"Assistant : Intro GeoSpatial.py to cal distance and intermediate points of system Assistant : Intro Looker.py search the pictures on google street view Hive : Improved the Agent.py and API.py System : Now the Graphium.py has the config to download images from Google Street View System : Graphium receive the picture folder to not request two time the same pano_image. Google restricts 25.000 requests by day","title":"Version 0.0.2"},{"location":"about/release-notes/#version-001","text":"Project start based on old graphium project","title":"Version 0.0.1"},{"location":"swarm/","text":"Swarm The swarm allow you search in google street map. Try execute the Main.py class. Commands Start using a city such Pelotas . python Main.py --mode warm --swarm_city 59dd4d7b6a86370cb85d6be7 Arguments --swarm_identifier : Identifier of swarm. Empty the instance will be created else get information from db . Default None . --swarm_name : name of swarm. If empty full with datatime --user_email : Email to identify the user. Default admin@graphium.com . --swarm_num_agent : Number of agents to work --swarm_city : City to crawler.","title":"About Swarm"},{"location":"swarm/#swarm","text":"The swarm allow you search in google street map. Try execute the Main.py class.","title":"Swarm"},{"location":"swarm/#commands","text":"Start using a city such Pelotas . python Main.py --mode warm --swarm_city 59dd4d7b6a86370cb85d6be7","title":"Commands"},{"location":"swarm/#arguments","text":"--swarm_identifier : Identifier of swarm. Empty the instance will be created else get information from db . Default None . --swarm_name : name of swarm. If empty full with datatime --user_email : Email to identify the user. Default admin@graphium.com . --swarm_num_agent : Number of agents to work --swarm_city : City to crawler.","title":"Arguments"},{"location":"swarm/anima/looker/","text":"Definition Looker.py look to google street view with point received from Geospatial.py and get the images of sides (left and right) with a instance of API.py . Params swarm_identifier : a string with swarm identifier. type:String logger : a instance of logger or None . type:Logger Methods driveFromPointToPoint : received two points find the intermediate points, logo to left and right of each point and send the image to Oracle analyze. checkPointToPredict : Check if in point the Oracle identify something if true sabe the informations","title":"Looker"},{"location":"swarm/anima/looker/#definition","text":"Looker.py look to google street view with point received from Geospatial.py and get the images of sides (left and right) with a instance of API.py .","title":"Definition"},{"location":"swarm/anima/looker/#params","text":"swarm_identifier : a string with swarm identifier. type:String logger : a instance of logger or None . type:Logger","title":"Params"},{"location":"swarm/anima/looker/#methods","text":"driveFromPointToPoint : received two points find the intermediate points, logo to left and right of each point and send the image to Oracle analyze. checkPointToPredict : Check if in point the Oracle identify something if true sabe the informations","title":"Methods"},{"location":"swarm/anima/oracle/","text":"Definition Oracle.py Load a keras model and take predictions in images of google street view. Params model_name : name of model used to predictions Methods predictInPano : Prediction in image. type:Boolean","title":"Oracle"},{"location":"swarm/anima/oracle/#definition","text":"Oracle.py Load a keras model and take predictions in images of google street view.","title":"Definition"},{"location":"swarm/anima/oracle/#params","text":"model_name : name of model used to predictions","title":"Params"},{"location":"swarm/anima/oracle/#methods","text":"predictInPano : Prediction in image. type:Boolean","title":"Methods"},{"location":"swarm/assistant/api/","text":"Definition API.py connect to OsmAPI. Params swarm_identifier : swarm identifier. type:Stirng logger : Logger to use in API. type:Logger Methods getWaysByNode : Get the routes that the dot is a bit. getPanoByPoint : Return the image pano form this point. type:Dic getPanoInfoByPoint : Return the information of this point (lat,lng). type:Dic getStreetGeocodeInfoFromMaps : Get street Geo Code information suchs country,city, address from Google Maps . getStreetGeoCodeInfoFromOSM : Get street Geo Code information suchs country,city, address from Open Street Maps","title":"API"},{"location":"swarm/assistant/api/#definition","text":"API.py connect to OsmAPI.","title":"Definition"},{"location":"swarm/assistant/api/#params","text":"swarm_identifier : swarm identifier. type:Stirng logger : Logger to use in API. type:Logger","title":"Params"},{"location":"swarm/assistant/api/#methods","text":"getWaysByNode : Get the routes that the dot is a bit. getPanoByPoint : Return the image pano form this point. type:Dic getPanoInfoByPoint : Return the information of this point (lat,lng). type:Dic getStreetGeocodeInfoFromMaps : Get street Geo Code information suchs country,city, address from Google Maps . getStreetGeoCodeInfoFromOSM : Get street Geo Code information suchs country,city, address from Open Street Maps","title":"Methods"},{"location":"swarm/assistant/geospatial/","text":"Definition Geospatial.py mensure to you the distance between two points or for example slice two points at many points with the same distance between them. Params logger : a instance of logger or None . type:Logger Methods getDistance : Return the distance bewteen two dots. type:float getIntermediatePointsFromTwoDots : Return intermediate points between two dots if the distance bewteen them is great that distanceMax. type:List calculateStreetOrientation : Return the bearing or the direction (degrees) of the points type:Float getIntermediatePointsFromTwoCoordinates : the same of getIntermediatePointsFromTwoDots but not receive a tuple, but the 4 values (lat1,lng1,lat2,lng2)","title":"GeoSpatial"},{"location":"swarm/assistant/geospatial/#definition","text":"Geospatial.py mensure to you the distance between two points or for example slice two points at many points with the same distance between them.","title":"Definition"},{"location":"swarm/assistant/geospatial/#params","text":"logger : a instance of logger or None . type:Logger","title":"Params"},{"location":"swarm/assistant/geospatial/#methods","text":"getDistance : Return the distance bewteen two dots. type:float getIntermediatePointsFromTwoDots : Return intermediate points between two dots if the distance bewteen them is great that distanceMax. type:List calculateStreetOrientation : Return the bearing or the direction (degrees) of the points type:Float getIntermediatePointsFromTwoCoordinates : the same of getIntermediatePointsFromTwoDots but not receive a tuple, but the 4 values (lat1,lng1,lat2,lng2)","title":"Methods"},{"location":"swarm/assistant/googleapi/","text":"Definition GoogleAPI.py get a valid key in a list of Google Console Keys. Params logger : a instance of logger or None . type:Logger Methods get_authorization_key : get a key from google apy list. type:Disc get_best_key_position : Returns the best key position. type:Int authorizing_key : Return if the get_best_key_position is authorized to be send a request. type:Bool time_elapsed_by_key : return the time elapsed between start and last calculation type:Int time_do_sleep_by_key : return seconds to sleep. type:Int","title":"GoogleAPI"},{"location":"swarm/assistant/googleapi/#definition","text":"GoogleAPI.py get a valid key in a list of Google Console Keys.","title":"Definition"},{"location":"swarm/assistant/googleapi/#params","text":"logger : a instance of logger or None . type:Logger","title":"Params"},{"location":"swarm/assistant/googleapi/#methods","text":"get_authorization_key : get a key from google apy list. type:Disc get_best_key_position : Returns the best key position. type:Int authorizing_key : Return if the get_best_key_position is authorized to be send a request. type:Bool time_elapsed_by_key : return the time elapsed between start and last calculation type:Int time_do_sleep_by_key : return seconds to sleep. type:Int","title":"Methods"},{"location":"swarm/assistant/helper/","text":"Definition Helper.py help you convert the file osm in a mongod structure. Params args : argparse. type:argparse Methods start : Start the execution","title":"Definition"},{"location":"swarm/assistant/helper/#definition","text":"Helper.py help you convert the file osm in a mongod structure.","title":"Definition"},{"location":"swarm/assistant/helper/#params","text":"args : argparse. type:argparse","title":"Params"},{"location":"swarm/assistant/helper/#methods","text":"start : Start the execution","title":"Methods"},{"location":"swarm/assistant/reader/","text":"Definition Reader.py allow you convert files .osm into a struct used by Graphium system. Params args : Receive the params suchs the file to convert. type:argparse Methods start : transform the file .osm in a mongodb struct. insertStreetInformationOSM : insert the data from street at mongodb insertCityInformationOSM : insert the information about the city at mongodb getCityAndCoutry : Return the city on mongodb. type:Dic readShapeFromOpenStreet : Get the shape with the information on ESRI shapefile.","title":"Reader"},{"location":"swarm/assistant/reader/#definition","text":"Reader.py allow you convert files .osm into a struct used by Graphium system.","title":"Definition"},{"location":"swarm/assistant/reader/#params","text":"args : Receive the params suchs the file to convert. type:argparse","title":"Params"},{"location":"swarm/assistant/reader/#methods","text":"start : transform the file .osm in a mongodb struct. insertStreetInformationOSM : insert the data from street at mongodb insertCityInformationOSM : insert the information about the city at mongodb getCityAndCoutry : Return the city on mongodb. type:Dic readShapeFromOpenStreet : Get the shape with the information on ESRI shapefile.","title":"Methods"},{"location":"swarm/assistant/scissor/","text":"Definition Scissor.py open the file and cut to fit exactly in proporcions described in scissor.json file. Params image_url : the image url to cut or manipulate. type:string logger : logger used in application default value is None. type:Logger Attributes original_image_url : Return the original url setted in params. type:Dataset original_width : Original with of image. type:int original_height : Original height of image. type:int image_name : image name type:string image_url : the url image type:Int image : A copy of original file type:Image width : width after processed type:Int height : heigth after processed type:Int window_height : width after processed rate type:Int window_width : heigth after processed rate type:Int manipulated : if the image was cutted type:bol Methods cut_to_fit : Cut the image to destiny_path close : force close the image","title":"Definition"},{"location":"swarm/assistant/scissor/#definition","text":"Scissor.py open the file and cut to fit exactly in proporcions described in scissor.json file.","title":"Definition"},{"location":"swarm/assistant/scissor/#params","text":"image_url : the image url to cut or manipulate. type:string logger : logger used in application default value is None. type:Logger","title":"Params"},{"location":"swarm/assistant/scissor/#attributes","text":"original_image_url : Return the original url setted in params. type:Dataset original_width : Original with of image. type:int original_height : Original height of image. type:int image_name : image name type:string image_url : the url image type:Int image : A copy of original file type:Image width : width after processed type:Int height : heigth after processed type:Int window_height : width after processed rate type:Int window_width : heigth after processed rate type:Int manipulated : if the image was cutted type:bol","title":"Attributes"},{"location":"swarm/assistant/scissor/#methods","text":"cut_to_fit : Cut the image to destiny_path close : force close the image","title":"Methods"},{"location":"swarm/hive/agent/","text":"Definition Agent.py is a class in Thread that walk in a street. Params swarm_identifier : a identifier. type:Stirng Methods run : start the executation. updateRule : Update the Street's counter. nodeByNode : calcule the distance between two dots in meters. type:Int firstNode : execute only on first node. lastNode : execute only on last node. lastNode : call when we have only one node at street. chooseTheFirstStreet : Method to choose the first street to try walk. First choose a way from wishlist else a aleatory way. type:Street chooseTheFirstStret : After walk one street new need choose de next this method choose the way with less count and return. If any way cross he then we need get other way how? Go to other agent =]. type:Street fastChooseTheNextStret : this method choose the fast way: check the list of wish, if empty choose the fist road that is not busy and count igual 0. type:Street choosingNewStreetToNavegate : choose the street with the less weight to navegate. type:Street appendPathBread : update the lat and lng of agent set at pathbread of agent. appendStreetVisited : insert the name of the street if agent are not visited yet. startAgent : Set the name, start the mongo information and others actions. finish : Set information about agent at db and close at db. getIdentifier : Return the identifier. type:Identifier setIdentifier : set the identifier. setAgentName : Return the agent name.","title":"Agent"},{"location":"swarm/hive/agent/#definition","text":"Agent.py is a class in Thread that walk in a street.","title":"Definition"},{"location":"swarm/hive/agent/#params","text":"swarm_identifier : a identifier. type:Stirng","title":"Params"},{"location":"swarm/hive/agent/#methods","text":"run : start the executation. updateRule : Update the Street's counter. nodeByNode : calcule the distance between two dots in meters. type:Int firstNode : execute only on first node. lastNode : execute only on last node. lastNode : call when we have only one node at street. chooseTheFirstStreet : Method to choose the first street to try walk. First choose a way from wishlist else a aleatory way. type:Street chooseTheFirstStret : After walk one street new need choose de next this method choose the way with less count and return. If any way cross he then we need get other way how? Go to other agent =]. type:Street fastChooseTheNextStret : this method choose the fast way: check the list of wish, if empty choose the fist road that is not busy and count igual 0. type:Street choosingNewStreetToNavegate : choose the street with the less weight to navegate. type:Street appendPathBread : update the lat and lng of agent set at pathbread of agent. appendStreetVisited : insert the name of the street if agent are not visited yet. startAgent : Set the name, start the mongo information and others actions. finish : Set information about agent at db and close at db. getIdentifier : Return the identifier. type:Identifier setIdentifier : set the identifier. setAgentName : Return the agent name.","title":"Methods"},{"location":"swarm/hive/swarm/","text":"Definition Swarm.py manage the Agent.py . Params args : argparse. type:argparse Methods syncFromDB : Sync the information with database start : Start the execution of each agents crawling the street until end list of street not visited finish : After the agents finish, the swarm, calcule QMI","title":"Swarm"},{"location":"swarm/hive/swarm/#definition","text":"Swarm.py manage the Agent.py .","title":"Definition"},{"location":"swarm/hive/swarm/#params","text":"args : argparse. type:argparse","title":"Params"},{"location":"swarm/hive/swarm/#methods","text":"syncFromDB : Sync the information with database start : Start the execution of each agents crawling the street until end list of street not visited finish : After the agents finish, the swarm, calcule QMI","title":"Methods"},{"location":"swarm/system/graphium/","text":"Definition The graphium return a instance of Graphium. It is a Dic with many configs what you can see inside the directory data/configs/ Attributes config : the metadata of configuration has default. The file data/configs/graphium.json is load to system. type:Dic Keys inside attribute config: { \"path_root\": \" PATH /kootstrap/\", \"path_log\":\"data/logs/\", \"path_config\":\"data/configs/\", \"path_dataset\":\"data/datasets/\", \"log_level\":\"INFO\", \"version\":\"0.0.1\" } mongo : the metadata of mongoDB used has default. The file data/configs/mongodb.json is load to system. type:Dic Keys inside attribute Mongod: { \"mongo_db\":\"graphium\", \"mongo_host\":\"localhost\", \"mongo_port\":27017 } osm : the metadata of Open Street Map used has default. The file data/configs/osm.json is load to system. type:Dic Keys inside attribute OSM: { \"use_urban_ways\": true, \"use_motorways\": true, \"use_othersways\":false, \"urban_highway_tipes\": [\"tertiary\", \"road\", \"residential\", \"service\", \"living_street\", \"pedestrian\", \"bus_guideway\", \"steps\",\"secondary\", \"trunk\", \"primary\"], \"motorways_highway_tipes\": [\"motorway\", \"escape\"], \"others_highway_tipes\": [\"track\"] } swarm : the metadata of Swarm used has default. The file data/configs/swarm.json is load to system. type:Dic Keys inside attribute Swarm: { \"swarm_turns\": 3, \"swarm_cycles\": -1, \"swarm_agent_names_API\": \"http://namey.muffinlabs.com/name.json?with_surname=true frequency=all\", \"swarm_agent_names\": [\"Coralina Malaya\",\"Abigail Johnson\",\"Antonietta Marinese\",\"Elisa Rogoff\",\"Serafim Folkerts\", \"Dulce Barrell\"], \"swarm_agent_colors\": [\"#E91E63\", \"#9C27B0\", \"#F44336\", \"#673AB7\", \"#3F51B5\", \"#2196F3\", \"#00BCD4\", \"#009688\", \"#4CAF50\", \"#CDDC39\", \"#FF9800\",\"#795548\",\"#FF5722\",\"#607D8B\",\"#9E9E9E\",\"#827717\"] } gmaps : the metadata of google street maps used has default. The file data/configs/gmaps.json is load to system. type:Dic Keys inside attribute Gmap: { \"width\": 640, \"height\": 450, \"google_key\": \"AIzaSyB6_XPVntnTJHG9jN9OrO11ou8GEV77qOM\", \"limit_maps_by_day\": 25000 } scissor : the metadata of scissor used has default. The file data/configs/scissor.json is load to system. type:Dic Keys inside attribute Scissor: { \"target_max_width\":224, \"target_max_height\":224, \"target_min_width\":224, \"target_min_height\":224, \"target_rate\":0.8 } Methods path_config : Return absolute path to configurations of koopstrap. type:String path_log : Return absolute path to logs of system. type:String path_dataset : Return absolute path to all datasets. type:String path_model : Return absolute path to all models. type:String path_picture : Return absolute path to all images on directory. type:String version : Return version of koopstrap. type:String","title":"Graphium"},{"location":"swarm/system/graphium/#definition","text":"The graphium return a instance of Graphium. It is a Dic with many configs what you can see inside the directory data/configs/","title":"Definition"},{"location":"swarm/system/graphium/#attributes","text":"config : the metadata of configuration has default. The file data/configs/graphium.json is load to system. type:Dic Keys inside attribute config: { \"path_root\": \" PATH /kootstrap/\", \"path_log\":\"data/logs/\", \"path_config\":\"data/configs/\", \"path_dataset\":\"data/datasets/\", \"log_level\":\"INFO\", \"version\":\"0.0.1\" } mongo : the metadata of mongoDB used has default. The file data/configs/mongodb.json is load to system. type:Dic Keys inside attribute Mongod: { \"mongo_db\":\"graphium\", \"mongo_host\":\"localhost\", \"mongo_port\":27017 } osm : the metadata of Open Street Map used has default. The file data/configs/osm.json is load to system. type:Dic Keys inside attribute OSM: { \"use_urban_ways\": true, \"use_motorways\": true, \"use_othersways\":false, \"urban_highway_tipes\": [\"tertiary\", \"road\", \"residential\", \"service\", \"living_street\", \"pedestrian\", \"bus_guideway\", \"steps\",\"secondary\", \"trunk\", \"primary\"], \"motorways_highway_tipes\": [\"motorway\", \"escape\"], \"others_highway_tipes\": [\"track\"] } swarm : the metadata of Swarm used has default. The file data/configs/swarm.json is load to system. type:Dic Keys inside attribute Swarm: { \"swarm_turns\": 3, \"swarm_cycles\": -1, \"swarm_agent_names_API\": \"http://namey.muffinlabs.com/name.json?with_surname=true frequency=all\", \"swarm_agent_names\": [\"Coralina Malaya\",\"Abigail Johnson\",\"Antonietta Marinese\",\"Elisa Rogoff\",\"Serafim Folkerts\", \"Dulce Barrell\"], \"swarm_agent_colors\": [\"#E91E63\", \"#9C27B0\", \"#F44336\", \"#673AB7\", \"#3F51B5\", \"#2196F3\", \"#00BCD4\", \"#009688\", \"#4CAF50\", \"#CDDC39\", \"#FF9800\",\"#795548\",\"#FF5722\",\"#607D8B\",\"#9E9E9E\",\"#827717\"] } gmaps : the metadata of google street maps used has default. The file data/configs/gmaps.json is load to system. type:Dic Keys inside attribute Gmap: { \"width\": 640, \"height\": 450, \"google_key\": \"AIzaSyB6_XPVntnTJHG9jN9OrO11ou8GEV77qOM\", \"limit_maps_by_day\": 25000 } scissor : the metadata of scissor used has default. The file data/configs/scissor.json is load to system. type:Dic Keys inside attribute Scissor: { \"target_max_width\":224, \"target_max_height\":224, \"target_min_width\":224, \"target_min_height\":224, \"target_rate\":0.8 }","title":"Attributes"},{"location":"swarm/system/graphium/#methods","text":"path_config : Return absolute path to configurations of koopstrap. type:String path_log : Return absolute path to logs of system. type:String path_dataset : Return absolute path to all datasets. type:String path_model : Return absolute path to all models. type:String path_picture : Return absolute path to all images on directory. type:String version : Return version of koopstrap. type:String","title":"Methods"},{"location":"swarm/system/helper/","text":"Definition The Helper return a instance of Helper. It content a list of methods that help the manipulation of date for exemple. Methods getTimeNow : Return a string with date in this format %Y-%m-%d %H:%M:%S . type:String getSerialNow : Return a string with a serial in this format %Y%m%d%H%M%S . type:String filePathToList : Receive a path of file, open and return a list of lines without \\n and \\r","title":"Helper"},{"location":"swarm/system/helper/#definition","text":"The Helper return a instance of Helper. It content a list of methods that help the manipulation of date for exemple.","title":"Definition"},{"location":"swarm/system/helper/#methods","text":"getTimeNow : Return a string with date in this format %Y-%m-%d %H:%M:%S . type:String getSerialNow : Return a string with a serial in this format %Y%m%d%H%M%S . type:String filePathToList : Receive a path of file, open and return a list of lines without \\n and \\r","title":"Methods"},{"location":"swarm/system/logger/","text":"Definition The Logger return a instance of Logger. It content a list of methods that help write in a log file. Methods error : Insert a message at level error. type:String critical : Insert a message at critical level. type:String warning : Insert a message at warning level. type:String info : Insert a message at info level. type:String debug : Insert a message at debug level. type:String","title":"Logger"},{"location":"swarm/system/logger/#definition","text":"The Logger return a instance of Logger. It content a list of methods that help write in a log file.","title":"Definition"},{"location":"swarm/system/logger/#methods","text":"error : Insert a message at level error. type:String critical : Insert a message at critical level. type:String warning : Insert a message at warning level. type:String info : Insert a message at info level. type:String debug : Insert a message at debug level. type:String","title":"Methods"},{"location":"swarm/system/mongo/","text":"Definition The Mongo return a unique instance of Mongo. It content a list of methods that help write in mongo DB. Methods Agents getAgentByIdentifier : Return the agent by Identifer. type:Object getAgentByName : Like getAgentByIdentifier but by name. type:Object updateAgentByName : Update agente by name. type:Boolean updateAgentByIdentifier : update agent by identifier . type:Boolean insertAgent : Create a new agent in a swarm by your identifier . type:String:Identifier endAgent : Finish their execution. type:Boolean getAgentsBySwarmIdentifier : Get agents in swar my identifier . type:List:Object getAgentQuery : Generic. type:List getAgentsActiveBySwarm : Only active agents in swarm by identifier . type:List getAgentsEndWellBySwarm : Return a list with agents that end well. type:List Users insertUser : Create a new user. type:String:Identifier updateUserInformation : Updat the email and date of user. type:Boolean getUsersQuery : Generic. type:List removeUsers : Remove user from mongo db. type:Boolean Streets getStreetByIdOSM : Return the first street by identifier . type:Object getStreetByName : Return the first street by street name . type:Object updateStreetById : Update the street with id identifier . type:Boolean getStreetQuery : Generic. type:List WishLists insertWishList : Insert a wish List that is a street that pretend visit. type:Boolean removeWishList : Remove a wish List by query . type:Boolean getWishListById : get wishList by id . type:Object Swarms insertSwarm : Insert a new swart at database . type:String:Identifier getSwarmByIdentifier : Return the first object with identifier . type:Object updateSwarmByIdentifier : update the swarm by identifier . type:Boolean countOneToMapsSwarmByIdentifer : Sum (increments) one at num_map_api_request attribute. getMapsCounterSwarmByIdentifer : Get the num_map_api_request value. type:Integer setMapsCounterSwarmByIdentifer : Set the value to num_map_api_request has default. Log addLog : add log in a swarm id . type:Boolean Wish updateWishById : update the wish by id . type:Object getWishListByIdentifier : update the wish List by Identifier . type:List getWishListNoProccessedByIdentifier : return only the streets in wishList not processed. type:List updateWishListById : Upodat the wish list with data . type:Boolean Graffiti insertGraffiti : Insert a graffiti in mongodb. type:String:Identifier","title":"Logger"},{"location":"swarm/system/mongo/#definition","text":"The Mongo return a unique instance of Mongo. It content a list of methods that help write in mongo DB.","title":"Definition"},{"location":"swarm/system/mongo/#methods","text":"","title":"Methods"},{"location":"swarm/system/mongo/#agents","text":"getAgentByIdentifier : Return the agent by Identifer. type:Object getAgentByName : Like getAgentByIdentifier but by name. type:Object updateAgentByName : Update agente by name. type:Boolean updateAgentByIdentifier : update agent by identifier . type:Boolean insertAgent : Create a new agent in a swarm by your identifier . type:String:Identifier endAgent : Finish their execution. type:Boolean getAgentsBySwarmIdentifier : Get agents in swar my identifier . type:List:Object getAgentQuery : Generic. type:List getAgentsActiveBySwarm : Only active agents in swarm by identifier . type:List getAgentsEndWellBySwarm : Return a list with agents that end well. type:List","title":"Agents"},{"location":"swarm/system/mongo/#users","text":"insertUser : Create a new user. type:String:Identifier updateUserInformation : Updat the email and date of user. type:Boolean getUsersQuery : Generic. type:List removeUsers : Remove user from mongo db. type:Boolean","title":"Users"},{"location":"swarm/system/mongo/#streets","text":"getStreetByIdOSM : Return the first street by identifier . type:Object getStreetByName : Return the first street by street name . type:Object updateStreetById : Update the street with id identifier . type:Boolean getStreetQuery : Generic. type:List","title":"Streets"},{"location":"swarm/system/mongo/#wishlists","text":"insertWishList : Insert a wish List that is a street that pretend visit. type:Boolean removeWishList : Remove a wish List by query . type:Boolean getWishListById : get wishList by id . type:Object","title":"WishLists"},{"location":"swarm/system/mongo/#swarms","text":"insertSwarm : Insert a new swart at database . type:String:Identifier getSwarmByIdentifier : Return the first object with identifier . type:Object updateSwarmByIdentifier : update the swarm by identifier . type:Boolean countOneToMapsSwarmByIdentifer : Sum (increments) one at num_map_api_request attribute. getMapsCounterSwarmByIdentifer : Get the num_map_api_request value. type:Integer setMapsCounterSwarmByIdentifer : Set the value to num_map_api_request has default.","title":"Swarms"},{"location":"swarm/system/mongo/#log","text":"addLog : add log in a swarm id . type:Boolean","title":"Log"},{"location":"swarm/system/mongo/#wish","text":"updateWishById : update the wish by id . type:Object getWishListByIdentifier : update the wish List by Identifier . type:List getWishListNoProccessedByIdentifier : return only the streets in wishList not processed. type:List updateWishListById : Upodat the wish list with data . type:Boolean","title":"Wish"},{"location":"swarm/system/mongo/#graffiti","text":"insertGraffiti : Insert a graffiti in mongodb. type:String:Identifier","title":"Graffiti"},{"location":"swarm/system/session/","text":"Definition Session.py set on database information about google API. Params logger : a instance of logger or None . type:Logger Methods get_info : return list of information on session database. update_key_data_start : Update start date from a key position. update_key_last_usage : Update last usage from a key position. update_key_count_usage : update count form a key position. reset_key_count_usage : Reset to zero (0) the counter of key.","title":"Session"},{"location":"swarm/system/session/#definition","text":"Session.py set on database information about google API.","title":"Definition"},{"location":"swarm/system/session/#params","text":"logger : a instance of logger or None . type:Logger","title":"Params"},{"location":"swarm/system/session/#methods","text":"get_info : return list of information on session database. update_key_data_start : Update start date from a key position. update_key_last_usage : Update last usage from a key position. update_key_count_usage : update count form a key position. reset_key_count_usage : Reset to zero (0) the counter of key.","title":"Methods"},{"location":"webserver/","text":"","title":"About Maker"}]}